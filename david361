
```sql
CREATE TABLE STUDENT (
    RollNo CHAR(6) PRIMARY KEY,
    StudentName VARCHAR(20),
    Course VARCHAR(10),
    DOB DATE
);

CREATE TABLE SOCIETY (
    SocID CHAR(6) PRIMARY KEY,
    SocName VARCHAR(20),
    MentorName VARCHAR(15),
    TotalSeats INT UNSIGNED
);

CREATE TABLE ENROLLMENT (
    RollNo CHAR(6),
    SID CHAR(6),
    DateOfEnrollment DATE,
    EnrollmentFees ENUM('yes', 'no'),
    FOREIGN KEY (RollNo) REFERENCES STUDENT(RollNo),
    FOREIGN KEY (SID) REFERENCES SOCIETY(SocID),
    PRIMARY KEY (RollNo, SID)
);
```

Let's tackle each query one by one:

1. Retrieve names of students enrolled in any society.
```sql
SELECT DISTINCT s.StudentName
FROM STUDENT s
JOIN ENROLLMENT e ON s.RollNo = e.RollNo;
```

2. Retrieve all society names.
```sql
SELECT SocName FROM SOCIETY;
```

3. Retrieve students' names starting with letter ‘A’.
```sql
SELECT StudentName FROM STUDENT WHERE StudentName LIKE 'A%';
```

4. Retrieve students' details studying in courses ‘computer science’ or ‘chemistry’.
```sql
SELECT * FROM STUDENT WHERE Course IN ('computer science', 'chemistry');
```

5. Retrieve students’ names whose roll no either starts with ‘X’ or ‘Z’ and ends with ‘9’
```sql
SELECT StudentName FROM STUDENT WHERE (RollNo LIKE 'X%' OR RollNo LIKE 'Z%') AND RollNo LIKE '%9';
```

6. Find society details with more than N TotalSeats where N is to be input by the user.
```sql
-- Assuming user input is provided as :user_input
SELECT * FROM SOCIETY WHERE TotalSeats > :user_input;
```

7. Update society table for mentor name of a specific society.
```sql
-- Assuming user provides the specific society ID and the new mentor name
UPDATE SOCIETY SET MentorName = :new_mentor_name WHERE SocID = :specific_soc_id;
```

8. Find society names in which more than five students have enrolled.
```sql
SELECT s.SocName
FROM SOCIETY s
JOIN ENROLLMENT e ON s.SocID = e.SID
GROUP BY s.SocID
HAVING COUNT(*) > 5;
```

9. Find the name of the youngest student enrolled in society ‘NSS’.
```sql
SELECT s.StudentName
FROM STUDENT s
JOIN ENROLLMENT e ON s.RollNo = e.RollNo
WHERE e.SID = 'NSS'
ORDER BY s.DOB ASC
LIMIT 1;
```

10. Find the name of the most popular society (on the basis of enrolled students).
```sql
SELECT s.SocName
FROM SOCIETY s
JOIN ENROLLMENT e ON s.SocID = e.SID
GROUP BY s.SocID
ORDER BY COUNT(*) DESC
LIMIT 1;
```

11. Find the name of two least popular societies (on the basis of enrolled students).
```sql
SELECT s.SocName
FROM SOCIETY s
LEFT JOIN ENROLLMENT e ON s.SocID = e.SID
GROUP BY s.SocID
ORDER BY COUNT(*) ASC
LIMIT 2;
```
12. Find the student names who are not enrolled in any society.
```sql
SELECT StudentName
FROM STUDENT
WHERE RollNo NOT IN (SELECT DISTINCT RollNo FROM ENROLLMENT);
```

13. Find the student names enrolled in at least two societies.
```sql
SELECT StudentName
FROM (
    SELECT RollNo, COUNT(DISTINCT SID) AS num_societies
    FROM ENROLLMENT
    GROUP BY RollNo
) AS enrollment_counts
JOIN STUDENT ON enrollment_counts.RollNo = STUDENT.RollNo
WHERE num_societies >= 2;
```

14. Find society names in which the maximum number of students are enrolled.
```sql
SELECT s.SocName
FROM SOCIETY s
JOIN (
    SELECT SID, COUNT(*) AS num_enrolled
    FROM ENROLLMENT
    GROUP BY SID
) AS enrollment_counts ON s.SocID = enrollment_counts.SID
ORDER BY num_enrolled DESC
LIMIT 1;
```

15. Find names of all students who have enrolled in any society and society names in which at least one student has enrolled.
```sql
SELECT DISTINCT s.StudentName, soc.SocName
FROM STUDENT s
LEFT JOIN ENROLLMENT e ON s.RollNo = e.RollNo
LEFT JOIN SOCIETY soc ON e.SID = soc.SocID;
```

16. Find names of students who are enrolled in any of the three societies ‘Debating’, ‘Dancing’ and ‘Sashakt’.
```sql
SELECT DISTINCT s.StudentName
FROM STUDENT s
JOIN ENROLLMENT e ON s.RollNo = e.RollNo
JOIN SOCIETY soc ON e.SID = soc.SocID
WHERE soc.SocName IN ('Debating', 'Dancing', 'Sashakt');
```

17. Find society names such that its mentor has a name with ‘Gupta’ in it.
```sql
SELECT SocName
FROM SOCIETY
WHERE MentorName LIKE '%Gupta%';
```

18. Find the society names in which the number of enrolled students is only 10% of its capacity.
```sql
SELECT s.SocName
FROM SOCIETY s
JOIN (
    SELECT SID, COUNT(*) AS num_enrolled
    FROM ENROLLMENT
    GROUP BY SID
) AS enrollment_counts ON s.SocID = enrollment_counts.SID
WHERE (enrollment_counts.num_enrolled * 100 / s.TotalSeats) = 10;
```

19. Display the vacant seats for each society.
```sql
SELECT s.SocName, (s.TotalSeats - COALESCE(e.num_enrolled, 0)) AS VacantSeats
FROM SOCIETY s
LEFT JOIN (
    SELECT SID, COUNT(*) AS num_enrolled
    FROM ENROLLMENT
    GROUP BY SID
) AS e ON s.SocID = e.SID;
```

20. Increment Total Seats of each society by 10%.
```sql
UPDATE SOCIETY SET TotalSeats = TotalSeats * 1.10;
```

21. Add the enrollment fees paid ('yes'/'No') field in the enrollment table.
```sql
ALTER TABLE ENROLLMENT ADD EnrollmentFees ENUM('yes', 'no') AFTER DateOfEnrollment;
```

22. Update date of enrollment of society id ‘s1’ to ‘2018-01-15’, ‘s2’ to current date and ‘s3’ to ‘2018-01-02’.
```sql
UPDATE ENROLLMENT
SET DateOfEnrollment = CASE 
                            WHEN SID = 's1' THEN '2018-01-15'
                            WHEN SID = 's2' THEN CURRENT_DATE
                            WHEN SID = 's3' THEN '2018-01-02'
                        END;
```

23. Create a view to keep track of society names with the total number of students enrolled in it.
```sql
CREATE VIEW SocietyEnrollmentCount AS
SELECT s.SocName, COUNT(e.RollNo) AS TotalEnrolled
FROM SOCIETY s
LEFT JOIN ENROLLMENT e ON s.SocID = e.SID
GROUP BY s.SocID;
```

24. Find student names enrolled in all the societies.
```sql
SELECT StudentName
FROM STUDENT
WHERE RollNo IN (
    SELECT RollNo
    FROM ENROLLMENT
    GROUP BY RollNo
    HAVING COUNT(DISTINCT SID) = (SELECT COUNT(*) FROM SOCIETY)
);
```

25. Count the number of societies with more than 5 students enrolled in it.
```sql
SELECT COUNT(*)
FROM (
    SELECT SID
    FROM ENROLLMENT
    GROUP BY SID
    HAVING COUNT(*) > 5
) AS SocietyCount;
```
26. Add column Mobile number in student table with default value ‘9999999999’.
```sql
ALTER TABLE STUDENT ADD MobileNumber VARCHAR(15) DEFAULT '9999999999';
```

27. Find the total number of students whose age is > 20 years.
```sql
SELECT COUNT(*)
FROM STUDENT
WHERE TIMESTAMPDIFF(YEAR, DOB, CURDATE()) > 20;
```

28. Find names of students who are born in 2001 and are enrolled in at least one society.
```sql
SELECT s.StudentName
FROM STUDENT s
JOIN ENROLLMENT e ON s.RollNo = e.RollNo
WHERE YEAR(s.DOB) = 2001;
```

29. Count all societies whose name starts with ‘S’ and ends with ‘t’ and at least 5 students are enrolled in the society.
```sql
SELECT COUNT(*)
FROM (
    SELECT SID
    FROM ENROLLMENT e
    JOIN SOCIETY s ON e.SID = s.SocID
    WHERE s.SocName LIKE 'S%' AND s.SocName LIKE '%t' 
    GROUP BY SID
    HAVING COUNT(*) >= 5
) AS SocietyCount;
```

30. Display the following information: Society name, Mentor name, Total Capacity, Total Enrolled, Unfilled Seats.
```sql
SELECT 
    s.SocName,
    s.MentorName,
    s.TotalSeats AS TotalCapacity,
    COALESCE(e.TotalEnrolled, 0) AS TotalEnrolled,
    (s.TotalSeats - COALESCE(e.TotalEnrolled, 0)) AS UnfilledSeats
FROM SOCIETY s
LEFT JOIN (
    SELECT SID, COUNT(*) AS TotalEnrolled
    FROM ENROLLMENT
    GROUP BY SID
) AS e ON s.SocID = e.SID;
```




-- Inserting sample data into the STUDENT table
INSERT INTO STUDENT (RollNo, StudentName, Course, DOB, MobileNumber) VALUES
('S001', 'Alice', 'Computer Science', '2000-05-15', '1234567890'),
('S002', 'Bob', 'Chemistry', '2001-02-20', '2345678901'),
('S003', 'Charlie', 'Physics', '1999-09-10', '3456789012');

-- Inserting sample data into the SOCIETY table
INSERT INTO SOCIETY (SocID, SocName, MentorName, TotalSeats) VALUES
('NSS', 'National Service Scheme', 'Mr. Gupta', 50),
('Debating', 'Debating Society', 'Ms. Smith', 30),
('Dancing', 'Dancing Club', 'Mr. Patel', 40);

-- Inserting sample data into the ENROLLMENT table
INSERT INTO ENROLLMENT (RollNo, SID, DateOfEnrollment, EnrollmentFees) VALUES
('S001', 'NSS', '2023-01-15', 'yes'),
('S002', 'Debating', '2023-02-10', 'no'),
('S003', 'Dancing', '2023-03-20', 'yes'),
('S002', 'NSS', '2023-04-05', 'yes');


Certainly! Here's how you can perform each of these database administration commands in SQL:

1. **Create User**:

To create a new user in a database, you typically use the `CREATE USER` statement followed by the username and password. Here's an example:

```sql
CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';
```

Replace `'username'` and `'password'` with the desired username and password for the new user.

2. **Create Role**:

To create a new role in a database, you use the `CREATE ROLE` statement followed by the role name. Here's an example:

```sql
CREATE ROLE rolename;
```

Replace `rolename` with the desired name for the new role.

3. **Grant Privileges to a Role**:

To grant privileges to a role in a database, you use the `GRANT` statement followed by the specific privileges and the role to which you want to grant them. Here's an example:

```sql
GRANT SELECT, INSERT, UPDATE ON tablename TO rolename;
```

Replace `SELECT, INSERT, UPDATE` with the specific privileges you want to grant, `tablename` with the name of the table, and `rolename` with the name of the role.

4. **Revoke Privileges from a Role**:

To revoke privileges from a role in a database, you use the `REVOKE` statement followed by the specific privileges and the role from which you want to revoke them. Here's an example:

```sql
REVOKE SELECT, INSERT, UPDATE ON tablename FROM rolename;
```

Replace `SELECT, INSERT, UPDATE` with the specific privileges you want to revoke, `tablename` with the name of the table, and `rolename` with the name of the role.

5. **Create Index**:

To create an index on a table in a database, you use the `CREATE INDEX` statement followed by the index name, table name, and column(s) on which you want to create the index. Here's an example:

```sql
CREATE INDEX indexname ON tablename (column1, column2, ...);
```

Replace `indexname` with the desired name for the index, `tablename` with the name of the table, and `column1, column2, ...` with the name(s) of the column(s) on which you want to create the index.






To interact with MySQL using Python, you can use a MySQL database connector. One of the popular connectors is `mysql-connector-python`, which is an official MySQL driver for Python provided by Oracle.

Here's a step-by-step guide on how to use Python to connect to a MySQL database, perform CRUD operations (Create, Read, Update, Delete), and execute SQL queries:

1. **Install `mysql-connector-python`**:

   Before you start, you need to install the `mysql-connector-python` package. You can install it using pip:

   ```bash
   pip install mysql-connector-python
   ```

2. **Connect to MySQL Database**:

   Here's how you can connect to a MySQL database using Python:

   ```python
   import mysql.connector

   # Connect to MySQL
   mydb = mysql.connector.connect(
       host="localhost",
       user="yourusername",
       password="yourpassword",
       database="yourdatabase"
   )

   # Create a cursor object
   mycursor = mydb.cursor()
   ```

   Replace `"localhost"`, `"yourusername"`, `"yourpassword"`, and `"yourdatabase"` with your MySQL server details.

3. **Execute SQL Queries**:

   You can execute SQL queries using the cursor object. Here's how you can execute a simple SQL query to fetch data from a table:

   ```python
   # Execute SQL query
   mycursor.execute("SELECT * FROM yourtable")

   # Fetch all rows
   result = mycursor.fetchall()

   # Print the result
   for row in result:
       print(row)
   ```

   Replace `"yourtable"` with the name of your table.

4. **Insert Data**:

   You can insert data into a table using the `INSERT INTO` statement. Here's an example:

   ```python
   # Insert data into table
   sql = "INSERT INTO yourtable (column1, column2) VALUES (%s, %s)"
   val = ("value1", "value2")
   mycursor.execute(sql, val)

   # Commit the transaction
   mydb.commit()

   print(mycursor.rowcount, "record inserted.")
   ```

   Replace `"yourtable"`, `"column1"`, `"column2"`, `"value1"`, and `"value2"` with your table and column names, and the values you want to insert.

5. **Update Data**:

   You can update data in a table using the `UPDATE` statement. Here's an example:

   ```python
   # Update data in table
   sql = "UPDATE yourtable SET column1 = %s WHERE column2 = %s"
   val = ("new_value", "existing_value")
   mycursor.execute(sql, val)

   # Commit the transaction
   mydb.commit()

   print(mycursor.rowcount, "record(s) updated.")
   ```

   Replace `"yourtable"`, `"column1"`, `"column2"`, `"new_value"`, and `"existing_value"` with your table and column names, and the new and existing values.

6. **Delete Data**:

   You can delete data from a table using the `DELETE FROM` statement. Here's an example:

   ```python
   # Delete data from table
   sql = "DELETE FROM yourtable WHERE column = %s"
   val = ("value_to_delete",)
   mycursor.execute(sql, val)

   # Commit the transaction
   mydb.commit()

   print(mycursor.rowcount, "record(s) deleted.")
   ```

   Replace `"yourtable"` and `"column"` with your table and column names, and `"value_to_delete"` with the value you want to delete.

7. **Close Connection**:

   After you're done with the database operations, don't forget to close the connection:

   ```python
   # Close connection
   mycursor.close()
   mydb.close()
   ```

   This will release the database resources.

That's it! You now know how to use Python to interact with MySQL databases using `mysql-connector-python`.
